# Se juntan las tablas
data <- full_join(table_1, table_2, by = c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet","guardian","traveltime","studytime","schoolsup","famsup","activities","higher","romantic","famrel","freetime","goout","Dalc","Walc","health"))
# Se colapsan las variables específicas de cada asignatura y se arreglan las demás variables
data <- data %>%
mutate(failures = rowMeans(cbind(failures.x, failures.y), na.rm = TRUE),
paid = as.factor(ifelse(paid.x == "yes" | paid.y == "yes", "yes", "no")),
absences = rowMeans(cbind(absences.x, absences.y), na.rm = TRUE),
G1 = rowMeans(cbind(G1.x, G1.y), na.rm = TRUE),
G2 = rowMeans(cbind(G2.x, G2.y), na.rm = TRUE),
G3 = rowMeans(cbind(G3.x, G3.y), na.rm = TRUE)) %>%
dplyr::select(-matches("failures."), -matches("paid."), -matches("absences."), -matches("G1."), -matches("G2."), -matches("G3."), -school, -Dalc) %>%
mutate(paid = as.factor(ifelse(is.na(paid) | paid == "no", "no", "yes")),
sex = factor(sex, labels = c("Mujer", "Hombre")),
famsize = ordered(famsize, levels = c("LE3","GT3")),
Medu = ordered(Medu, levels = c(0,1,2,3,4)),
Fedu = ordered(Fedu, levels = c(0,1,2,3,4)),
famrel = ordered(famrel, levels = c(1,2,3,4,5)),
freetime = ordered(freetime, levels = c(1,2,3,4,5)),
goout = ordered(goout, levels = c(1,2,3,4,5), labels = c("Nada","Poco","Algo","Bastante","Mucho")),
Walc = ordered(Walc, levels = c(1,2,3,4,5), labels = c("Nada","Poco","Algo","Bastante","Mucho")),
health = ordered(health, levels = c(1,2,3,4,5)))
# Estimación del modelo con Leave-One-Out Cross-Validation
fit_lda <- lda(Walc ~ ., data = data, CV = TRUE)
lda_acc <- mean(fit_lda$class == as.character(data$Walc))
# Se estima el modelo con el hiperparámetro óptimo y todos los datos
fitRfFinal <- randomForest(Walc ~ ., data = data, mtry = 9, ntree = 1000)
# Se predicen los datos test
pred_rf <- predict(fit_rf, data)
# Se predicen los datos test
pred_rf <- predict(fitRfFinal, data)
# Se compara la predicción con el valor real
rf_acc <- mean(as.character(pred_rf) == as.character(test_data$Walc))
# Se compara la predicción con el valor real
rf_acc <- mean(as.character(pred_rf) == as.character(data$Walc))
rf_acc
summary(fitRfFinal)
summary(fitRfFinal)
?randomForest
summary(fitRfFinal)$importance
fitRfFinal$importance
fitRfFinal$err.rate
fitRfFinal$confusion
library(tidyverse)
library(tidyverse)
library(RColorBrewer)
library(knitr)
library(kableExtra)
library(MASS)
library(caret)
library(caret)
library(randomForest)
# Se cargan los datos
table_1 <- read_csv("data/student-mat.csv", col_types = "ffifffffffffiinffffffffffffffnnnn")
table_2 <- read_csv("data/student-por.csv", col_types = "ffifffffffffiinffffffffffffffnnnn")
# Se juntan las tablas
data <- full_join(table_1, table_2, by = c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet","guardian","traveltime","studytime","schoolsup","famsup","activities","higher","romantic","famrel","freetime","goout","Dalc","Walc","health"))
# Se colapsan las variables específicas de cada asignatura y se arreglan las demás variables
data <- data %>%
mutate(failures = rowMeans(cbind(failures.x, failures.y), na.rm = TRUE),
paid = as.factor(ifelse(paid.x == "yes" | paid.y == "yes", "yes", "no")),
absences = rowMeans(cbind(absences.x, absences.y), na.rm = TRUE),
G1 = rowMeans(cbind(G1.x, G1.y), na.rm = TRUE),
G2 = rowMeans(cbind(G2.x, G2.y), na.rm = TRUE),
G3 = rowMeans(cbind(G3.x, G3.y), na.rm = TRUE)) %>%
dplyr::select(-matches("failures."), -matches("paid."), -matches("absences."), -matches("G1."), -matches("G2."), -matches("G3."), -school, -Dalc) %>%
mutate(paid = as.factor(ifelse(is.na(paid) | paid == "no", "no", "yes")),
sex = factor(sex, labels = c("Mujer", "Hombre")),
famsize = ordered(famsize, levels = c("LE3","GT3")),
Medu = ordered(Medu, levels = c(0,1,2,3,4)),
Fedu = ordered(Fedu, levels = c(0,1,2,3,4)),
famrel = ordered(famrel, levels = c(1,2,3,4,5)),
freetime = ordered(freetime, levels = c(1,2,3,4,5)),
goout = ordered(goout, levels = c(1,2,3,4,5), labels = c("Nada","Poco","Algo","Bastante","Mucho")),
Walc = ordered(Walc, levels = c(1,2,3,4,5), labels = c("Nada","Poco","Algo","Bastante","Mucho")),
health = ordered(health, levels = c(1,2,3,4,5)))
# Estimación del modelo con Leave-One-Out Cross-Validation
fit_lda <- lda(Walc ~ ., data = data, CV = TRUE)
lda_acc <- mean(fit_lda$class == as.character(data$Walc))
# Se estima el modelo con el hiperparámetro óptimo y todos los datos
fitRfFinal <- randomForest(Walc ~ ., data = data, mtry = 9, ntree = 1000)
fitRfFinal$importance
sort(fitRfFinal$importance)
sort(fitRfFinal$importance, decreasing = TRUE)
tibble(fitRfFinal$importance)
names(fitRfFinal$importance)
prueba <- fitRfFinal$importance
prueba
row.names(prueba)
prueba
tibble(row.names(prueba), prueba)
arrange(tibble(names = row.names(prueba), MeanDecreaseGini = prueba), MeanDecreaseGini)
arrange(tibble(names = row.names(prueba), MeanDecreaseGini = prueba), desc(MeanDecreaseGini))
kable(arrange(tibble(names = row.names(prueba), `Disminución Media de GINI` = prueba), desc(MeanDecreaseGini)), align = c("l", "c"))
kable(arrange(tibble(names = row.names(prueba), DisminuciónMediaGINI = prueba), desc(MeanDecreaseGini)), align = c("l", "c"))
kable(arrange(tibble(names = row.names(prueba), DisminuciónMediaGINI = prueba), desc(MeanDecreaseGini)), align = c("l", "c"))
kable(arrange(tibble(names = row.names(prueba), `Disminución Media de GINI` = prueba), desc(`Disminución Media de GINI`)), align = c("l", "c"))
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(forcats)
library(ggpubr)
library(kableExtra)
options(knitr.kable.NA = " ") # En la tabla kable no aparecen valores NA
options(scipen=999) # No aparece notación científica
head(data)
library(tidyverse)
library(knitr)
library(forcats)
library(ggpubr)
library(kableExtra)
data <- tibble()
# Se leen uno a uno los ficheros y se guardan en un data frame
for(file in list.files("data")) {
read_csv(paste("data/", file, sep = "")) %>%
select(Code, Faction, Class, KB, D, HK, DD, HD, Win, Rol) %>%
rbind(data) -> data
}
setwd("C:/Users/Sergi/DeveloperStation/MADM/tecnologias-analisis-datos-masivos/trabajo final")
# Se leen uno a uno los ficheros y se guardan en un data frame
for(file in list.files("data")) {
read_csv(paste("data/", file, sep = "")) %>%
select(Code, Faction, Class, KB, D, HK, DD, HD, Win, Rol) %>%
rbind(data) -> data
}
getwd()
paste("data/", file, sep = "")
library(tidyverse)
library(knitr)
library(forcats)
library(ggpubr)
library(kableExtra)
data <- tibble()
# Se leen uno a uno los ficheros y se guardan en un data frame
for(file in list.files("data")) {
read_csv(paste("data/", file, sep = "")) %>%
select(Code, Faction, Class, KB, D, HK, DD, HD, Win, Rol) %>%
rbind(data) -> data
}
# Se leen uno a uno los ficheros y se guardan en un data frame
for(file in list.files("data")) {
read_csv(paste("data/", file, sep = "")) %>%
select(Code, Faction, Class, KB, D, HK, DD, HD, Win, Rol) %>%
rbind(data) -> data
}
paste("data/", file, sep = "")
read_csv("data/wowbgs.csv")
read_csv("data/wowbgs.csv")%>%
select(Code, Faction, Class, KB, D, HK, DD, HD, Win, Rol)
read_csv("data/wowbgs.csv")
read_csv("data/wowbgs.csv") %>%
select(Code, Faction, Class, KB, D, HK, DD, HD, Win, Rol)
read_csv("data/wowbgs.csv") %>%
dplyr::select(Code, Faction, Class, KB, D, HK, DD, HD, Win, Rol)
data <- tibble()
# Se leen uno a uno los ficheros y se guardan en un data frame
for(file in list.files("data")) {
read_csv(paste("data/", file, sep = "")) %>%
dplyr::select(Code, Faction, Class, KB, D, HK, DD, HD, Win, Rol) %>%
rbind(data) -> data
}
# Se arerglan las variables
data %>%
replace_na(list(Win = 0)) %>%
mutate(Battleground = as.factor(substr(Code, 1, 2)),
Faction = as.factor(Faction),
Class = as.factor(Class),
Win = as.factor(Win),
Rol = as.factor(Rol)) %>%
dplyr::select(-Code) -> data
head(data)
data <- tibble()
# Se leen uno a uno los ficheros y se guardan en un data frame
for(file in list.files("data")) {
read_csv(paste("data/", file, sep = "")) %>%
dplyr::select(Code, Faction, Class, KB, D, HK, DD, HD, Win, Rol) %>%
rbind(data) -> data
}
# Se leen uno a uno los ficheros y se guardan en un data frame
for(file in list.files("data")) {
read_csv(paste("data/", file, sep = "")) %>%
dplyr::select(Code, Faction, Class, KB, D, HK, DD, HD, Win, Rol) %>%
rbind(data) -> data
}
# Se arerglan las variables
data %>%
replace_na(list(Win = 0)) %>%
mutate(Battleground = as.factor(substr(Code, 1, 2)),
Faction = as.factor(Faction),
Class = as.factor(Class),
Win = as.factor(Win),
Rol = as.factor(Rol)) %>%
dplyr::select(-Code) -> data
data <- tibble()
# Se leen uno a uno los ficheros y se guardan en un data frame
for(file in list.files("data")) {
read_csv(paste("data/", file, sep = "")) %>%
dplyr::select(Code, Faction, Class, KB, D, HK, DD, HD, Win, Rol) %>%
rbind(data) -> data
}
# Se arerglan las variables
data %>%
replace_na(list(Win = 0)) %>%
mutate(Battleground = as.factor(substr(Code, 1, 2)),
Faction = as.factor(Faction),
Class = as.factor(Class),
Win = as.factor(Win),
Rol = as.factor(Rol)) %>%
dplyr::select(-Code) -> data
head(data)
# Se usa la función fct_inorder del paquete forcats para ordenar los niveles de los
#factores en función de la cantidad de observaciones
# Se usa la función ggarrange del paquete ggpubr para poder imprimir diferentes gráficos
#dentro de un mismo plot
plotClass <- ggplot(data) +
geom_hline(yintercept = length(which(data$Class == "Shaman")),
color = "darkgray",
linetype = 2) +
geom_bar(aes(x = fct_infreq(Class), fill = Class),
color = "black",
show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 15)) +
ggtitle("Distribución de las clases de los personajes") +
scale_fill_manual(values = c("#C41E3A", "#A330C9", "#FF7C0A", "#AAD372",
"#3FC7EB", "#00FF98", "#F48CBA", "#FFFFFF",
"#FFF468", "#0070DD", "#8788EE", "#C69B6D")) +
geom_hline(yintercept = 0, color = "black") +
xlab("Clase") +
ylab("Frecuencia absoluta")
plotBG <- ggplot(data) +
geom_bar(aes(x = fct_infreq(Battleground)), fill = "darkgray", color = "black") +
ggtitle("Distribución de los campos de batalla") +
geom_hline(yintercept = 0, color = "black") +
xlab("Campo de batalla") +
ylab("Frecuencia absoluta") +
geom_text(aes(label = length(which(data$Battleground == "SA"))),
x = "SA",
y = length(which(data$Battleground == "SA")) + 250,
check_overlap = TRUE) +
geom_text(aes(label = length(which(data$Battleground == "DG"))),
x = "DG",
y = length(which(data$Battleground == "DG")) + 250,
check_overlap = TRUE) +
geom_text(aes(label = length(which(data$Battleground == "SS"))),
x = "SS",
y = length(which(data$Battleground == "SS")) + 250,
check_overlap = TRUE)
pHat <- prop.table(table(data$Class, data$Win), margin = 1)[,2]
# Se calculan los estadísticos T
Ti <- (pHat - 0.5) / sqrt((0.5 * (1 - 0.5)) / as.vector(table(data$Class)))
# Se calculan los p-valores
pValue <- round(ifelse(pnorm(Ti) > 0.5, 1 - pnorm(Ti), pnorm(Ti)), 4)
plotHK_D <- ggplot(data) +
geom_jitter(aes(x = HK, y = D, color = Win), alpha = 0.4) +
scale_color_manual(values = c("#9d9d9d", "#00ccff")) +
theme(panel.background = element_rect(color = "black", fill = "white"),
panel.grid = element_blank()) +
xlab("Asistencias") +
ylab("Muertes")
plotX <- ggplot(data) +
geom_density(aes(x = HK, fill = Win), alpha = 0.6) +
scale_fill_manual(values = c("#9d9d9d", "#00ccff")) +
theme_void()
plotY <- ggplot(data) +
geom_boxplot(aes(x = Win, y = D, fill = Win)) +
scale_fill_manual(values = c("#9d9d9d", "#00ccff")) +
theme_void()
fig <- ggarrange(plotX, NULL, plotHK_D, plotY,
ncol = 2, nrow = 2,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = TRUE)
# Se busca el 5% de personajes con mayor número de asesinatos
data5KB <- data %>%
filter(KB >= quantile(data$KB, 0.95))
acpFit <- prcomp(data[,4:7], center = TRUE, scale = TRUE)
acpTable <- round(summary(acpFit)$importance, 4)
rownames(acpTable) <- c("Desviación Típica",
"Proporción de Varianza",
"Proporción Acumulada")
# Función para crear un biplot
acp_biplot <- function(acp) {
data <- data.frame(obsnames = 1:nrow(acp$x), acp$x)
plot <- ggplot(data) +
geom_point(aes(x = data[,"PC1"], y = data[,"PC2"]),
alpha = 0.2,
size = 1,
color = "black")
plot <- plot + geom_hline(yintercept = 0, aes(0), size = 0.2) +
geom_vline(aes(0), size = 0.2, color = "black", xintercept = 0)
datapc <- data.frame(varnames = rownames(acp$rotation), acp$rotation)
mult <- min((max(data[,"PC2"]) - min(data[,"PC2"]) /
(max(datapc[,"PC2"]) - min(datapc[,"PC2"]))),
(max(data[,"PC1"]) - min(data[,"PC1"]) /
(max(datapc[,"PC1"]) - min(datapc[,"PC1"]))))
datapc <- transform(datapc,
v1 = 0.7 * mult * (get("PC1")),
v2 = 0.7 * mult * (get("PC2")))
plot <- plot +
geom_segment(data = datapc,
aes(x = 0, y = 0, xend = v1, yend = v2),
arrow = arrow(length = unit(0.2, "cm")),
alpha = 0.75, color = "red")
plot <- plot + coord_equal() +
geom_text(data = datapc,
aes(x = v1, y = v2, label = varnames),
size = 4,
vjust = 1,
color = "darkred")
plot + ggtitle("Biplot") + xlab("PC1") + ylab("PC2")
}
# Se insertan los CP en el data frame
data <- cbind(data, acpFit$x[,1:3])
hcComplete <- hclust(dist(data[,11:12]), method = "complete")
hcCut = as.factor(cutree(hcComplete, 3))
data <- cbind(data, hcCut)
set.seed(1)
kmc2 <- kmeans(data[,11:12], 2)
data <- cbind(data, kmc2 = as.factor(kmc2$cluster))
ggplot(data) +
geom_point(aes(x = PC1, y = PC2, color = kmc2), alpha = 0.2) +
labs(color = "Grupo") +
ggtitle("Separación por clusters", subtitle = "k-means clustering con 2 grupos") +
scale_color_manual(values = c("#948B2E", "#AB4D39"))
ggplot(data) +
geom_point(aes(x = PC1, y = PC2, color = Rol), alpha = 0.2) +
ggtitle("Separación por Rol") +
scale_color_manual(values = c("#AB4D39", "#4B8028"))
set.seed(1)
kmc3 <- kmeans(data[,11:12], 3)
data <- cbind(data, kmc3 = as.factor(kmc3$cluster))
ggplot(data) +
geom_point(aes(x = PC1, y = PC2, color = kmc3), alpha = 0.2) +
labs(color = "Grupo") +
ggtitle("Separación por clusters", subtitle = "k-means clustering con 3 grupos") +
scale_color_manual(values = c("#4B8028", "#948B2E", "#AB4D39"))
set.seed(1)
WCSS = vector()
for(i in 1:10) {
WCSS[i] <- sum(kmeans(data[,11:12], i)$withinss)
}
dataWCSS <- tibble(K = 1:10, WCSS)
ggplot(dataWCSS, mapping = aes(x = K, y = WCSS)) +
geom_line() +
geom_point() +
geom_point(x = 3, y = WCSS[3], size = 3) +
scale_x_continuous(breaks = 1:10) +
ggtitle("Método del codo", subtitle = "Elección del k óptimo")
head(data)
?createDataPartition
library(caret)
summary(data)
head(data)
?kable_styling
?kable
library(tidyverse)
library(tidyverse)
library(knitr)
library(forcats)
library(ggpubr)
library(kableExtra)
library(caret)
data <- tibble()
# Se leen uno a uno los ficheros y se guardan en un data frame
for(file in list.files("data")) {
read_csv(paste("data/", file, sep = "")) %>%
dplyr::select(Code, Faction, Class, KB, D, HK, DD, HD, Win, Rol) %>%
rbind(data) -> data
}
# Se arerglan las variables
data %>%
replace_na(list(Win = 0)) %>%
mutate(Battleground = as.factor(substr(Code, 1, 2)),
Faction = as.factor(Faction),
Class = as.factor(Class),
Win = as.factor(Win),
Rol = as.factor(Rol)) %>%
dplyr::select(-Code) -> data
# Se usa la función fct_inorder del paquete forcats para ordenar los niveles de los
#factores en función de la cantidad de observaciones
# Se usa la función ggarrange del paquete ggpubr para poder imprimir diferentes gráficos
#dentro de un mismo plot
plotClass <- ggplot(data) +
geom_hline(yintercept = length(which(data$Class == "Shaman")),
color = "darkgray",
linetype = 2) +
geom_bar(aes(x = fct_infreq(Class), fill = Class),
color = "black",
show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 15)) +
ggtitle("Distribución de las clases de los personajes") +
scale_fill_manual(values = c("#C41E3A", "#A330C9", "#FF7C0A", "#AAD372",
"#3FC7EB", "#00FF98", "#F48CBA", "#FFFFFF",
"#FFF468", "#0070DD", "#8788EE", "#C69B6D")) +
geom_hline(yintercept = 0, color = "black") +
xlab("Clase") +
ylab("Frecuencia absoluta")
plotBG <- ggplot(data) +
geom_bar(aes(x = fct_infreq(Battleground)), fill = "darkgray", color = "black") +
ggtitle("Distribución de los campos de batalla") +
geom_hline(yintercept = 0, color = "black") +
xlab("Campo de batalla") +
ylab("Frecuencia absoluta") +
geom_text(aes(label = length(which(data$Battleground == "SA"))),
x = "SA",
y = length(which(data$Battleground == "SA")) + 250,
check_overlap = TRUE) +
geom_text(aes(label = length(which(data$Battleground == "DG"))),
x = "DG",
y = length(which(data$Battleground == "DG")) + 250,
check_overlap = TRUE) +
geom_text(aes(label = length(which(data$Battleground == "SS"))),
x = "SS",
y = length(which(data$Battleground == "SS")) + 250,
check_overlap = TRUE)
ggarrange(plotClass, plotBG, nrow = 2)
pHat <- prop.table(table(data$Class, data$Win), margin = 1)[,2]
# Se calculan los estadísticos T
Ti <- (pHat - 0.5) / sqrt((0.5 * (1 - 0.5)) / as.vector(table(data$Class)))
# Se calculan los p-valores
pValue <- round(ifelse(pnorm(Ti) > 0.5, 1 - pnorm(Ti), pnorm(Ti)), 4)
plotHK_D <- ggplot(data) +
geom_jitter(aes(x = HK, y = D, color = Win), alpha = 0.4) +
scale_color_manual(values = c("#9d9d9d", "#00ccff")) +
theme(panel.background = element_rect(color = "black", fill = "white"),
panel.grid = element_blank()) +
xlab("Asistencias") +
ylab("Muertes")
plotX <- ggplot(data) +
geom_density(aes(x = HK, fill = Win), alpha = 0.6) +
scale_fill_manual(values = c("#9d9d9d", "#00ccff")) +
theme_void()
plotY <- ggplot(data) +
geom_boxplot(aes(x = Win, y = D, fill = Win)) +
scale_fill_manual(values = c("#9d9d9d", "#00ccff")) +
theme_void()
fig <- ggarrange(plotX, NULL, plotHK_D, plotY,
ncol = 2, nrow = 2,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = TRUE)
# Se busca el 5% de personajes con mayor número de asesinatos
data5KB <- data %>%
filter(KB >= quantile(data$KB, 0.95))
acpFit <- prcomp(data[,4:7], center = TRUE, scale = TRUE)
acpTable <- round(summary(acpFit)$importance, 4)
rownames(acpTable) <- c("Desviación Típica",
"Proporción de Varianza",
"Proporción Acumulada")
# Función para crear un biplot
acp_biplot <- function(acp) {
data <- data.frame(obsnames = 1:nrow(acp$x), acp$x)
plot <- ggplot(data) +
geom_point(aes(x = data[,"PC1"], y = data[,"PC2"]),
alpha = 0.2,
size = 1,
color = "black")
plot <- plot + geom_hline(yintercept = 0, aes(0), size = 0.2) +
geom_vline(aes(0), size = 0.2, color = "black", xintercept = 0)
datapc <- data.frame(varnames = rownames(acp$rotation), acp$rotation)
mult <- min((max(data[,"PC2"]) - min(data[,"PC2"]) /
(max(datapc[,"PC2"]) - min(datapc[,"PC2"]))),
(max(data[,"PC1"]) - min(data[,"PC1"]) /
(max(datapc[,"PC1"]) - min(datapc[,"PC1"]))))
datapc <- transform(datapc,
v1 = 0.7 * mult * (get("PC1")),
v2 = 0.7 * mult * (get("PC2")))
plot <- plot +
geom_segment(data = datapc,
aes(x = 0, y = 0, xend = v1, yend = v2),
arrow = arrow(length = unit(0.2, "cm")),
alpha = 0.75, color = "red")
plot <- plot + coord_equal() +
geom_text(data = datapc,
aes(x = v1, y = v2, label = varnames),
size = 4,
vjust = 1,
color = "darkred")
plot + ggtitle("Biplot") + xlab("PC1") + ylab("PC2")
}
# Se insertan los CP en el data frame
data <- cbind(data, acpFit$x[,1:3])
hcComplete <- hclust(dist(data[,11:12]), method = "complete")
hcCut <- as.factor(cutree(hcComplete, 3))
data <- cbind(data, hcCut)
ggplot(data) +
geom_point(aes(x = PC1, y = PC2, color = hcCut), alpha = 0.2) +
labs(color = "Grupo") +
ggtitle("Separación por clusters", subtitle = "Cluster Jerárquico con conexión Completa") +
scale_color_manual(values = c("#948B2E", "#AB4D39", "#4B8028"))
set.seed(1)
kmc2 <- kmeans(data[,11:12], 2)
data <- cbind(data, kmc2 = as.factor(kmc2$cluster))
ggplot(data) +
geom_point(aes(x = PC1, y = PC2, color = kmc2), alpha = 0.2) +
labs(color = "Grupo") +
ggtitle("Separación por clusters", subtitle = "k-means clustering con 2 grupos") +
scale_color_manual(values = c("#948B2E", "#AB4D39"))
set.seed(1)
kmc3 <- kmeans(data[,11:12], 3)
data <- cbind(data, kmc3 = as.factor(kmc3$cluster))
set.seed(1)
WCSS <- vector()
for(i in 1:10) {
WCSS[i] <- sum(kmeans(data[,11:12], i)$withinss)
}
dataWCSS <- tibble(K = 1:10, WCSS)
ggplot(dataWCSS, mapping = aes(x = K, y = WCSS)) +
geom_line() +
geom_point() +
geom_point(x = 3, y = WCSS[3], size = 3) +
scale_x_continuous(breaks = 1:10) +
ggtitle("Método del codo", subtitle = "Elección del K óptimo")
head(data)
head(data)
